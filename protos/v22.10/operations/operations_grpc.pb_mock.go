// Code generated by MockGen. DO NOT EDIT.
// Source: operations_grpc.pb.go

// Package operations is a generated GoMock package.
package operations

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shared "github.com/pivonroll/EventStore-Client-Go/protos/v22.10/shared"
	grpc "google.golang.org/grpc"
)

// MockOperationsClient is a mock of OperationsClient interface.
type MockOperationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsClientMockRecorder
}

// MockOperationsClientMockRecorder is the mock recorder for MockOperationsClient.
type MockOperationsClientMockRecorder struct {
	mock *MockOperationsClient
}

// NewMockOperationsClient creates a new mock instance.
func NewMockOperationsClient(ctrl *gomock.Controller) *MockOperationsClient {
	mock := &MockOperationsClient{ctrl: ctrl}
	mock.recorder = &MockOperationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationsClient) EXPECT() *MockOperationsClientMockRecorder {
	return m.recorder
}

// MergeIndexes mocks base method.
func (m *MockOperationsClient) MergeIndexes(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MergeIndexes", varargs...)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeIndexes indicates an expected call of MergeIndexes.
func (mr *MockOperationsClientMockRecorder) MergeIndexes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeIndexes", reflect.TypeOf((*MockOperationsClient)(nil).MergeIndexes), varargs...)
}

// ResignNode mocks base method.
func (m *MockOperationsClient) ResignNode(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResignNode", varargs...)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResignNode indicates an expected call of ResignNode.
func (mr *MockOperationsClientMockRecorder) ResignNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResignNode", reflect.TypeOf((*MockOperationsClient)(nil).ResignNode), varargs...)
}

// RestartPersistentSubscriptions mocks base method.
func (m *MockOperationsClient) RestartPersistentSubscriptions(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartPersistentSubscriptions", varargs...)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartPersistentSubscriptions indicates an expected call of RestartPersistentSubscriptions.
func (mr *MockOperationsClientMockRecorder) RestartPersistentSubscriptions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartPersistentSubscriptions", reflect.TypeOf((*MockOperationsClient)(nil).RestartPersistentSubscriptions), varargs...)
}

// SetNodePriority mocks base method.
func (m *MockOperationsClient) SetNodePriority(ctx context.Context, in *SetNodePriorityReq, opts ...grpc.CallOption) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetNodePriority", varargs...)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNodePriority indicates an expected call of SetNodePriority.
func (mr *MockOperationsClientMockRecorder) SetNodePriority(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodePriority", reflect.TypeOf((*MockOperationsClient)(nil).SetNodePriority), varargs...)
}

// Shutdown mocks base method.
func (m *MockOperationsClient) Shutdown(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Shutdown", varargs...)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockOperationsClientMockRecorder) Shutdown(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockOperationsClient)(nil).Shutdown), varargs...)
}

// StartScavenge mocks base method.
func (m *MockOperationsClient) StartScavenge(ctx context.Context, in *StartScavengeReq, opts ...grpc.CallOption) (*ScavengeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartScavenge", varargs...)
	ret0, _ := ret[0].(*ScavengeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartScavenge indicates an expected call of StartScavenge.
func (mr *MockOperationsClientMockRecorder) StartScavenge(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScavenge", reflect.TypeOf((*MockOperationsClient)(nil).StartScavenge), varargs...)
}

// StopScavenge mocks base method.
func (m *MockOperationsClient) StopScavenge(ctx context.Context, in *StopScavengeReq, opts ...grpc.CallOption) (*ScavengeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopScavenge", varargs...)
	ret0, _ := ret[0].(*ScavengeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopScavenge indicates an expected call of StopScavenge.
func (mr *MockOperationsClientMockRecorder) StopScavenge(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopScavenge", reflect.TypeOf((*MockOperationsClient)(nil).StopScavenge), varargs...)
}

// MockOperationsServer is a mock of OperationsServer interface.
type MockOperationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsServerMockRecorder
}

// MockOperationsServerMockRecorder is the mock recorder for MockOperationsServer.
type MockOperationsServerMockRecorder struct {
	mock *MockOperationsServer
}

// NewMockOperationsServer creates a new mock instance.
func NewMockOperationsServer(ctrl *gomock.Controller) *MockOperationsServer {
	mock := &MockOperationsServer{ctrl: ctrl}
	mock.recorder = &MockOperationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationsServer) EXPECT() *MockOperationsServerMockRecorder {
	return m.recorder
}

// MergeIndexes mocks base method.
func (m *MockOperationsServer) MergeIndexes(arg0 context.Context, arg1 *shared.Empty) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeIndexes", arg0, arg1)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeIndexes indicates an expected call of MergeIndexes.
func (mr *MockOperationsServerMockRecorder) MergeIndexes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeIndexes", reflect.TypeOf((*MockOperationsServer)(nil).MergeIndexes), arg0, arg1)
}

// ResignNode mocks base method.
func (m *MockOperationsServer) ResignNode(arg0 context.Context, arg1 *shared.Empty) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResignNode", arg0, arg1)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResignNode indicates an expected call of ResignNode.
func (mr *MockOperationsServerMockRecorder) ResignNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResignNode", reflect.TypeOf((*MockOperationsServer)(nil).ResignNode), arg0, arg1)
}

// RestartPersistentSubscriptions mocks base method.
func (m *MockOperationsServer) RestartPersistentSubscriptions(arg0 context.Context, arg1 *shared.Empty) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartPersistentSubscriptions", arg0, arg1)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartPersistentSubscriptions indicates an expected call of RestartPersistentSubscriptions.
func (mr *MockOperationsServerMockRecorder) RestartPersistentSubscriptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartPersistentSubscriptions", reflect.TypeOf((*MockOperationsServer)(nil).RestartPersistentSubscriptions), arg0, arg1)
}

// SetNodePriority mocks base method.
func (m *MockOperationsServer) SetNodePriority(arg0 context.Context, arg1 *SetNodePriorityReq) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodePriority", arg0, arg1)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNodePriority indicates an expected call of SetNodePriority.
func (mr *MockOperationsServerMockRecorder) SetNodePriority(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodePriority", reflect.TypeOf((*MockOperationsServer)(nil).SetNodePriority), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockOperationsServer) Shutdown(arg0 context.Context, arg1 *shared.Empty) (*shared.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0, arg1)
	ret0, _ := ret[0].(*shared.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockOperationsServerMockRecorder) Shutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockOperationsServer)(nil).Shutdown), arg0, arg1)
}

// StartScavenge mocks base method.
func (m *MockOperationsServer) StartScavenge(arg0 context.Context, arg1 *StartScavengeReq) (*ScavengeResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartScavenge", arg0, arg1)
	ret0, _ := ret[0].(*ScavengeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartScavenge indicates an expected call of StartScavenge.
func (mr *MockOperationsServerMockRecorder) StartScavenge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartScavenge", reflect.TypeOf((*MockOperationsServer)(nil).StartScavenge), arg0, arg1)
}

// StopScavenge mocks base method.
func (m *MockOperationsServer) StopScavenge(arg0 context.Context, arg1 *StopScavengeReq) (*ScavengeResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopScavenge", arg0, arg1)
	ret0, _ := ret[0].(*ScavengeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopScavenge indicates an expected call of StopScavenge.
func (mr *MockOperationsServerMockRecorder) StopScavenge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopScavenge", reflect.TypeOf((*MockOperationsServer)(nil).StopScavenge), arg0, arg1)
}

// mustEmbedUnimplementedOperationsServer mocks base method.
func (m *MockOperationsServer) mustEmbedUnimplementedOperationsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOperationsServer")
}

// mustEmbedUnimplementedOperationsServer indicates an expected call of mustEmbedUnimplementedOperationsServer.
func (mr *MockOperationsServerMockRecorder) mustEmbedUnimplementedOperationsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOperationsServer", reflect.TypeOf((*MockOperationsServer)(nil).mustEmbedUnimplementedOperationsServer))
}

// MockUnsafeOperationsServer is a mock of UnsafeOperationsServer interface.
type MockUnsafeOperationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOperationsServerMockRecorder
}

// MockUnsafeOperationsServerMockRecorder is the mock recorder for MockUnsafeOperationsServer.
type MockUnsafeOperationsServerMockRecorder struct {
	mock *MockUnsafeOperationsServer
}

// NewMockUnsafeOperationsServer creates a new mock instance.
func NewMockUnsafeOperationsServer(ctrl *gomock.Controller) *MockUnsafeOperationsServer {
	mock := &MockUnsafeOperationsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOperationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOperationsServer) EXPECT() *MockUnsafeOperationsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOperationsServer mocks base method.
func (m *MockUnsafeOperationsServer) mustEmbedUnimplementedOperationsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOperationsServer")
}

// mustEmbedUnimplementedOperationsServer indicates an expected call of mustEmbedUnimplementedOperationsServer.
func (mr *MockUnsafeOperationsServerMockRecorder) mustEmbedUnimplementedOperationsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOperationsServer", reflect.TypeOf((*MockUnsafeOperationsServer)(nil).mustEmbedUnimplementedOperationsServer))
}
