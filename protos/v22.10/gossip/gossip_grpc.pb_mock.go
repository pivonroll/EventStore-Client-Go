// Code generated by MockGen. DO NOT EDIT.
// Source: gossip_grpc.pb.go

// Package gossip is a generated GoMock package.
package gossip

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	shared "github.com/pivonroll/EventStore-Client-Go/protos/v22.10/shared"
	grpc "google.golang.org/grpc"
)

// MockGossipClient is a mock of GossipClient interface.
type MockGossipClient struct {
	ctrl     *gomock.Controller
	recorder *MockGossipClientMockRecorder
}

// MockGossipClientMockRecorder is the mock recorder for MockGossipClient.
type MockGossipClientMockRecorder struct {
	mock *MockGossipClient
}

// NewMockGossipClient creates a new mock instance.
func NewMockGossipClient(ctrl *gomock.Controller) *MockGossipClient {
	mock := &MockGossipClient{ctrl: ctrl}
	mock.recorder = &MockGossipClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGossipClient) EXPECT() *MockGossipClientMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockGossipClient) Read(ctx context.Context, in *shared.Empty, opts ...grpc.CallOption) (*ClusterInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(*ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockGossipClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockGossipClient)(nil).Read), varargs...)
}

// MockGossipServer is a mock of GossipServer interface.
type MockGossipServer struct {
	ctrl     *gomock.Controller
	recorder *MockGossipServerMockRecorder
}

// MockGossipServerMockRecorder is the mock recorder for MockGossipServer.
type MockGossipServerMockRecorder struct {
	mock *MockGossipServer
}

// NewMockGossipServer creates a new mock instance.
func NewMockGossipServer(ctrl *gomock.Controller) *MockGossipServer {
	mock := &MockGossipServer{ctrl: ctrl}
	mock.recorder = &MockGossipServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGossipServer) EXPECT() *MockGossipServerMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockGossipServer) Read(arg0 context.Context, arg1 *shared.Empty) (*ClusterInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(*ClusterInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockGossipServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockGossipServer)(nil).Read), arg0, arg1)
}

// mustEmbedUnimplementedGossipServer mocks base method.
func (m *MockGossipServer) mustEmbedUnimplementedGossipServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGossipServer")
}

// mustEmbedUnimplementedGossipServer indicates an expected call of mustEmbedUnimplementedGossipServer.
func (mr *MockGossipServerMockRecorder) mustEmbedUnimplementedGossipServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGossipServer", reflect.TypeOf((*MockGossipServer)(nil).mustEmbedUnimplementedGossipServer))
}

// MockUnsafeGossipServer is a mock of UnsafeGossipServer interface.
type MockUnsafeGossipServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGossipServerMockRecorder
}

// MockUnsafeGossipServerMockRecorder is the mock recorder for MockUnsafeGossipServer.
type MockUnsafeGossipServerMockRecorder struct {
	mock *MockUnsafeGossipServer
}

// NewMockUnsafeGossipServer creates a new mock instance.
func NewMockUnsafeGossipServer(ctrl *gomock.Controller) *MockUnsafeGossipServer {
	mock := &MockUnsafeGossipServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGossipServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGossipServer) EXPECT() *MockUnsafeGossipServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGossipServer mocks base method.
func (m *MockUnsafeGossipServer) mustEmbedUnimplementedGossipServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGossipServer")
}

// mustEmbedUnimplementedGossipServer indicates an expected call of mustEmbedUnimplementedGossipServer.
func (mr *MockUnsafeGossipServerMockRecorder) mustEmbedUnimplementedGossipServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGossipServer", reflect.TypeOf((*MockUnsafeGossipServer)(nil).mustEmbedUnimplementedGossipServer))
}
