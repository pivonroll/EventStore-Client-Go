// Code generated by MockGen. DO NOT EDIT.
// Source: streams_grpc.pb.go

// Package streams is a generated GoMock package.
package streams

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockStreamsClient is a mock of StreamsClient interface.
type MockStreamsClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsClientMockRecorder
}

// MockStreamsClientMockRecorder is the mock recorder for MockStreamsClient.
type MockStreamsClientMockRecorder struct {
	mock *MockStreamsClient
}

// NewMockStreamsClient creates a new mock instance.
func NewMockStreamsClient(ctrl *gomock.Controller) *MockStreamsClient {
	mock := &MockStreamsClient{ctrl: ctrl}
	mock.recorder = &MockStreamsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsClient) EXPECT() *MockStreamsClientMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockStreamsClient) Append(ctx context.Context, opts ...grpc.CallOption) (Streams_AppendClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Append", varargs...)
	ret0, _ := ret[0].(Streams_AppendClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockStreamsClientMockRecorder) Append(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStreamsClient)(nil).Append), varargs...)
}

// BatchAppend mocks base method.
func (m *MockStreamsClient) BatchAppend(ctx context.Context, opts ...grpc.CallOption) (Streams_BatchAppendClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchAppend", varargs...)
	ret0, _ := ret[0].(Streams_BatchAppendClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchAppend indicates an expected call of BatchAppend.
func (mr *MockStreamsClientMockRecorder) BatchAppend(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAppend", reflect.TypeOf((*MockStreamsClient)(nil).BatchAppend), varargs...)
}

// Delete mocks base method.
func (m *MockStreamsClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStreamsClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStreamsClient)(nil).Delete), varargs...)
}

// Read mocks base method.
func (m *MockStreamsClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (Streams_ReadClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(Streams_ReadClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStreamsClientMockRecorder) Read(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStreamsClient)(nil).Read), varargs...)
}

// Tombstone mocks base method.
func (m *MockStreamsClient) Tombstone(ctx context.Context, in *TombstoneReq, opts ...grpc.CallOption) (*TombstoneResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tombstone", varargs...)
	ret0, _ := ret[0].(*TombstoneResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tombstone indicates an expected call of Tombstone.
func (mr *MockStreamsClientMockRecorder) Tombstone(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tombstone", reflect.TypeOf((*MockStreamsClient)(nil).Tombstone), varargs...)
}

// MockStreams_ReadClient is a mock of Streams_ReadClient interface.
type MockStreams_ReadClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreams_ReadClientMockRecorder
}

// MockStreams_ReadClientMockRecorder is the mock recorder for MockStreams_ReadClient.
type MockStreams_ReadClientMockRecorder struct {
	mock *MockStreams_ReadClient
}

// NewMockStreams_ReadClient creates a new mock instance.
func NewMockStreams_ReadClient(ctrl *gomock.Controller) *MockStreams_ReadClient {
	mock := &MockStreams_ReadClient{ctrl: ctrl}
	mock.recorder = &MockStreams_ReadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreams_ReadClient) EXPECT() *MockStreams_ReadClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockStreams_ReadClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStreams_ReadClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStreams_ReadClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStreams_ReadClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreams_ReadClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreams_ReadClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStreams_ReadClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStreams_ReadClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStreams_ReadClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockStreams_ReadClient) Recv() (*ReadResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ReadResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreams_ReadClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreams_ReadClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreams_ReadClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreams_ReadClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreams_ReadClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockStreams_ReadClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreams_ReadClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreams_ReadClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStreams_ReadClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStreams_ReadClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStreams_ReadClient)(nil).Trailer))
}

// MockStreams_AppendClient is a mock of Streams_AppendClient interface.
type MockStreams_AppendClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreams_AppendClientMockRecorder
}

// MockStreams_AppendClientMockRecorder is the mock recorder for MockStreams_AppendClient.
type MockStreams_AppendClientMockRecorder struct {
	mock *MockStreams_AppendClient
}

// NewMockStreams_AppendClient creates a new mock instance.
func NewMockStreams_AppendClient(ctrl *gomock.Controller) *MockStreams_AppendClient {
	mock := &MockStreams_AppendClient{ctrl: ctrl}
	mock.recorder = &MockStreams_AppendClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreams_AppendClient) EXPECT() *MockStreams_AppendClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockStreams_AppendClient) CloseAndRecv() (*AppendResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*AppendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockStreams_AppendClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockStreams_AppendClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method.
func (m *MockStreams_AppendClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStreams_AppendClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStreams_AppendClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStreams_AppendClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreams_AppendClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreams_AppendClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStreams_AppendClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStreams_AppendClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStreams_AppendClient)(nil).Header))
}

// RecvMsg mocks base method.
func (m_2 *MockStreams_AppendClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreams_AppendClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreams_AppendClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreams_AppendClient) Send(arg0 *AppendReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreams_AppendClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreams_AppendClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreams_AppendClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreams_AppendClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreams_AppendClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStreams_AppendClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStreams_AppendClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStreams_AppendClient)(nil).Trailer))
}

// MockStreams_BatchAppendClient is a mock of Streams_BatchAppendClient interface.
type MockStreams_BatchAppendClient struct {
	ctrl     *gomock.Controller
	recorder *MockStreams_BatchAppendClientMockRecorder
}

// MockStreams_BatchAppendClientMockRecorder is the mock recorder for MockStreams_BatchAppendClient.
type MockStreams_BatchAppendClientMockRecorder struct {
	mock *MockStreams_BatchAppendClient
}

// NewMockStreams_BatchAppendClient creates a new mock instance.
func NewMockStreams_BatchAppendClient(ctrl *gomock.Controller) *MockStreams_BatchAppendClient {
	mock := &MockStreams_BatchAppendClient{ctrl: ctrl}
	mock.recorder = &MockStreams_BatchAppendClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreams_BatchAppendClient) EXPECT() *MockStreams_BatchAppendClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockStreams_BatchAppendClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockStreams_BatchAppendClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockStreams_BatchAppendClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreams_BatchAppendClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).Context))
}

// Header mocks base method.
func (m *MockStreams_BatchAppendClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockStreams_BatchAppendClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockStreams_BatchAppendClient) Recv() (*BatchAppendResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*BatchAppendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreams_BatchAppendClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreams_BatchAppendClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreams_BatchAppendClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreams_BatchAppendClient) Send(arg0 *BatchAppendReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreams_BatchAppendClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreams_BatchAppendClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreams_BatchAppendClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockStreams_BatchAppendClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockStreams_BatchAppendClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockStreams_BatchAppendClient)(nil).Trailer))
}

// MockStreamsServer is a mock of StreamsServer interface.
type MockStreamsServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamsServerMockRecorder
}

// MockStreamsServerMockRecorder is the mock recorder for MockStreamsServer.
type MockStreamsServerMockRecorder struct {
	mock *MockStreamsServer
}

// NewMockStreamsServer creates a new mock instance.
func NewMockStreamsServer(ctrl *gomock.Controller) *MockStreamsServer {
	mock := &MockStreamsServer{ctrl: ctrl}
	mock.recorder = &MockStreamsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamsServer) EXPECT() *MockStreamsServerMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockStreamsServer) Append(arg0 Streams_AppendServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockStreamsServerMockRecorder) Append(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStreamsServer)(nil).Append), arg0)
}

// BatchAppend mocks base method.
func (m *MockStreamsServer) BatchAppend(arg0 Streams_BatchAppendServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchAppend", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchAppend indicates an expected call of BatchAppend.
func (mr *MockStreamsServerMockRecorder) BatchAppend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchAppend", reflect.TypeOf((*MockStreamsServer)(nil).BatchAppend), arg0)
}

// Delete mocks base method.
func (m *MockStreamsServer) Delete(arg0 context.Context, arg1 *DeleteReq) (*DeleteResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStreamsServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStreamsServer)(nil).Delete), arg0, arg1)
}

// Read mocks base method.
func (m *MockStreamsServer) Read(arg0 *ReadReq, arg1 Streams_ReadServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockStreamsServerMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStreamsServer)(nil).Read), arg0, arg1)
}

// Tombstone mocks base method.
func (m *MockStreamsServer) Tombstone(arg0 context.Context, arg1 *TombstoneReq) (*TombstoneResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tombstone", arg0, arg1)
	ret0, _ := ret[0].(*TombstoneResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Tombstone indicates an expected call of Tombstone.
func (mr *MockStreamsServerMockRecorder) Tombstone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tombstone", reflect.TypeOf((*MockStreamsServer)(nil).Tombstone), arg0, arg1)
}

// mustEmbedUnimplementedStreamsServer mocks base method.
func (m *MockStreamsServer) mustEmbedUnimplementedStreamsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamsServer")
}

// mustEmbedUnimplementedStreamsServer indicates an expected call of mustEmbedUnimplementedStreamsServer.
func (mr *MockStreamsServerMockRecorder) mustEmbedUnimplementedStreamsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamsServer", reflect.TypeOf((*MockStreamsServer)(nil).mustEmbedUnimplementedStreamsServer))
}

// MockUnsafeStreamsServer is a mock of UnsafeStreamsServer interface.
type MockUnsafeStreamsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStreamsServerMockRecorder
}

// MockUnsafeStreamsServerMockRecorder is the mock recorder for MockUnsafeStreamsServer.
type MockUnsafeStreamsServerMockRecorder struct {
	mock *MockUnsafeStreamsServer
}

// NewMockUnsafeStreamsServer creates a new mock instance.
func NewMockUnsafeStreamsServer(ctrl *gomock.Controller) *MockUnsafeStreamsServer {
	mock := &MockUnsafeStreamsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStreamsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStreamsServer) EXPECT() *MockUnsafeStreamsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStreamsServer mocks base method.
func (m *MockUnsafeStreamsServer) mustEmbedUnimplementedStreamsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStreamsServer")
}

// mustEmbedUnimplementedStreamsServer indicates an expected call of mustEmbedUnimplementedStreamsServer.
func (mr *MockUnsafeStreamsServerMockRecorder) mustEmbedUnimplementedStreamsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStreamsServer", reflect.TypeOf((*MockUnsafeStreamsServer)(nil).mustEmbedUnimplementedStreamsServer))
}

// MockStreams_ReadServer is a mock of Streams_ReadServer interface.
type MockStreams_ReadServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreams_ReadServerMockRecorder
}

// MockStreams_ReadServerMockRecorder is the mock recorder for MockStreams_ReadServer.
type MockStreams_ReadServerMockRecorder struct {
	mock *MockStreams_ReadServer
}

// NewMockStreams_ReadServer creates a new mock instance.
func NewMockStreams_ReadServer(ctrl *gomock.Controller) *MockStreams_ReadServer {
	mock := &MockStreams_ReadServer{ctrl: ctrl}
	mock.recorder = &MockStreams_ReadServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreams_ReadServer) EXPECT() *MockStreams_ReadServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreams_ReadServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreams_ReadServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreams_ReadServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockStreams_ReadServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreams_ReadServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreams_ReadServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreams_ReadServer) Send(arg0 *ReadResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreams_ReadServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreams_ReadServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockStreams_ReadServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStreams_ReadServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStreams_ReadServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreams_ReadServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreams_ReadServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreams_ReadServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStreams_ReadServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStreams_ReadServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStreams_ReadServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStreams_ReadServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStreams_ReadServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStreams_ReadServer)(nil).SetTrailer), arg0)
}

// MockStreams_AppendServer is a mock of Streams_AppendServer interface.
type MockStreams_AppendServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreams_AppendServerMockRecorder
}

// MockStreams_AppendServerMockRecorder is the mock recorder for MockStreams_AppendServer.
type MockStreams_AppendServerMockRecorder struct {
	mock *MockStreams_AppendServer
}

// NewMockStreams_AppendServer creates a new mock instance.
func NewMockStreams_AppendServer(ctrl *gomock.Controller) *MockStreams_AppendServer {
	mock := &MockStreams_AppendServer{ctrl: ctrl}
	mock.recorder = &MockStreams_AppendServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreams_AppendServer) EXPECT() *MockStreams_AppendServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreams_AppendServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreams_AppendServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreams_AppendServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockStreams_AppendServer) Recv() (*AppendReq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*AppendReq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreams_AppendServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreams_AppendServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreams_AppendServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreams_AppendServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreams_AppendServer)(nil).RecvMsg), m)
}

// SendAndClose mocks base method.
func (m *MockStreams_AppendServer) SendAndClose(arg0 *AppendResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockStreams_AppendServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockStreams_AppendServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockStreams_AppendServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStreams_AppendServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStreams_AppendServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreams_AppendServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreams_AppendServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreams_AppendServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStreams_AppendServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStreams_AppendServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStreams_AppendServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStreams_AppendServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStreams_AppendServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStreams_AppendServer)(nil).SetTrailer), arg0)
}

// MockStreams_BatchAppendServer is a mock of Streams_BatchAppendServer interface.
type MockStreams_BatchAppendServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreams_BatchAppendServerMockRecorder
}

// MockStreams_BatchAppendServerMockRecorder is the mock recorder for MockStreams_BatchAppendServer.
type MockStreams_BatchAppendServerMockRecorder struct {
	mock *MockStreams_BatchAppendServer
}

// NewMockStreams_BatchAppendServer creates a new mock instance.
func NewMockStreams_BatchAppendServer(ctrl *gomock.Controller) *MockStreams_BatchAppendServer {
	mock := &MockStreams_BatchAppendServer{ctrl: ctrl}
	mock.recorder = &MockStreams_BatchAppendServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreams_BatchAppendServer) EXPECT() *MockStreams_BatchAppendServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockStreams_BatchAppendServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockStreams_BatchAppendServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockStreams_BatchAppendServer) Recv() (*BatchAppendReq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*BatchAppendReq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockStreams_BatchAppendServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockStreams_BatchAppendServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockStreams_BatchAppendServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockStreams_BatchAppendServer) Send(arg0 *BatchAppendResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreams_BatchAppendServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockStreams_BatchAppendServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockStreams_BatchAppendServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockStreams_BatchAppendServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockStreams_BatchAppendServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockStreams_BatchAppendServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockStreams_BatchAppendServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockStreams_BatchAppendServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockStreams_BatchAppendServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockStreams_BatchAppendServer)(nil).SetTrailer), arg0)
}
