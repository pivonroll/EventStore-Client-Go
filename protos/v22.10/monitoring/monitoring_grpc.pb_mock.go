// Code generated by MockGen. DO NOT EDIT.
// Source: monitoring_grpc.pb.go

// Package monitoring is a generated GoMock package.
package monitoring

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockMonitoringClient is a mock of MonitoringClient interface.
type MockMonitoringClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringClientMockRecorder
}

// MockMonitoringClientMockRecorder is the mock recorder for MockMonitoringClient.
type MockMonitoringClientMockRecorder struct {
	mock *MockMonitoringClient
}

// NewMockMonitoringClient creates a new mock instance.
func NewMockMonitoringClient(ctrl *gomock.Controller) *MockMonitoringClient {
	mock := &MockMonitoringClient{ctrl: ctrl}
	mock.recorder = &MockMonitoringClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoringClient) EXPECT() *MockMonitoringClientMockRecorder {
	return m.recorder
}

// Stats mocks base method.
func (m *MockMonitoringClient) Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (Monitoring_StatsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stats", varargs...)
	ret0, _ := ret[0].(Monitoring_StatsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockMonitoringClientMockRecorder) Stats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockMonitoringClient)(nil).Stats), varargs...)
}

// MockMonitoring_StatsClient is a mock of Monitoring_StatsClient interface.
type MockMonitoring_StatsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoring_StatsClientMockRecorder
}

// MockMonitoring_StatsClientMockRecorder is the mock recorder for MockMonitoring_StatsClient.
type MockMonitoring_StatsClientMockRecorder struct {
	mock *MockMonitoring_StatsClient
}

// NewMockMonitoring_StatsClient creates a new mock instance.
func NewMockMonitoring_StatsClient(ctrl *gomock.Controller) *MockMonitoring_StatsClient {
	mock := &MockMonitoring_StatsClient{ctrl: ctrl}
	mock.recorder = &MockMonitoring_StatsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoring_StatsClient) EXPECT() *MockMonitoring_StatsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockMonitoring_StatsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMonitoring_StatsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMonitoring_StatsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMonitoring_StatsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMonitoring_StatsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMonitoring_StatsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockMonitoring_StatsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMonitoring_StatsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMonitoring_StatsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockMonitoring_StatsClient) Recv() (*StatsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*StatsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMonitoring_StatsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMonitoring_StatsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockMonitoring_StatsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMonitoring_StatsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMonitoring_StatsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockMonitoring_StatsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMonitoring_StatsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMonitoring_StatsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockMonitoring_StatsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMonitoring_StatsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMonitoring_StatsClient)(nil).Trailer))
}

// MockMonitoringServer is a mock of MonitoringServer interface.
type MockMonitoringServer struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoringServerMockRecorder
}

// MockMonitoringServerMockRecorder is the mock recorder for MockMonitoringServer.
type MockMonitoringServerMockRecorder struct {
	mock *MockMonitoringServer
}

// NewMockMonitoringServer creates a new mock instance.
func NewMockMonitoringServer(ctrl *gomock.Controller) *MockMonitoringServer {
	mock := &MockMonitoringServer{ctrl: ctrl}
	mock.recorder = &MockMonitoringServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoringServer) EXPECT() *MockMonitoringServerMockRecorder {
	return m.recorder
}

// Stats mocks base method.
func (m *MockMonitoringServer) Stats(arg0 *StatsReq, arg1 Monitoring_StatsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockMonitoringServerMockRecorder) Stats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockMonitoringServer)(nil).Stats), arg0, arg1)
}

// mustEmbedUnimplementedMonitoringServer mocks base method.
func (m *MockMonitoringServer) mustEmbedUnimplementedMonitoringServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMonitoringServer")
}

// mustEmbedUnimplementedMonitoringServer indicates an expected call of mustEmbedUnimplementedMonitoringServer.
func (mr *MockMonitoringServerMockRecorder) mustEmbedUnimplementedMonitoringServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMonitoringServer", reflect.TypeOf((*MockMonitoringServer)(nil).mustEmbedUnimplementedMonitoringServer))
}

// MockUnsafeMonitoringServer is a mock of UnsafeMonitoringServer interface.
type MockUnsafeMonitoringServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMonitoringServerMockRecorder
}

// MockUnsafeMonitoringServerMockRecorder is the mock recorder for MockUnsafeMonitoringServer.
type MockUnsafeMonitoringServerMockRecorder struct {
	mock *MockUnsafeMonitoringServer
}

// NewMockUnsafeMonitoringServer creates a new mock instance.
func NewMockUnsafeMonitoringServer(ctrl *gomock.Controller) *MockUnsafeMonitoringServer {
	mock := &MockUnsafeMonitoringServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMonitoringServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMonitoringServer) EXPECT() *MockUnsafeMonitoringServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMonitoringServer mocks base method.
func (m *MockUnsafeMonitoringServer) mustEmbedUnimplementedMonitoringServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMonitoringServer")
}

// mustEmbedUnimplementedMonitoringServer indicates an expected call of mustEmbedUnimplementedMonitoringServer.
func (mr *MockUnsafeMonitoringServerMockRecorder) mustEmbedUnimplementedMonitoringServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMonitoringServer", reflect.TypeOf((*MockUnsafeMonitoringServer)(nil).mustEmbedUnimplementedMonitoringServer))
}

// MockMonitoring_StatsServer is a mock of Monitoring_StatsServer interface.
type MockMonitoring_StatsServer struct {
	ctrl     *gomock.Controller
	recorder *MockMonitoring_StatsServerMockRecorder
}

// MockMonitoring_StatsServerMockRecorder is the mock recorder for MockMonitoring_StatsServer.
type MockMonitoring_StatsServerMockRecorder struct {
	mock *MockMonitoring_StatsServer
}

// NewMockMonitoring_StatsServer creates a new mock instance.
func NewMockMonitoring_StatsServer(ctrl *gomock.Controller) *MockMonitoring_StatsServer {
	mock := &MockMonitoring_StatsServer{ctrl: ctrl}
	mock.recorder = &MockMonitoring_StatsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitoring_StatsServer) EXPECT() *MockMonitoring_StatsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockMonitoring_StatsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMonitoring_StatsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMonitoring_StatsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockMonitoring_StatsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMonitoring_StatsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMonitoring_StatsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockMonitoring_StatsServer) Send(arg0 *StatsResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMonitoring_StatsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMonitoring_StatsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockMonitoring_StatsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMonitoring_StatsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMonitoring_StatsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockMonitoring_StatsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMonitoring_StatsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMonitoring_StatsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockMonitoring_StatsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMonitoring_StatsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMonitoring_StatsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMonitoring_StatsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMonitoring_StatsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMonitoring_StatsServer)(nil).SetTrailer), arg0)
}
