// Code generated by MockGen. DO NOT EDIT.
// Source: users_grpc.pb.go

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockUsersClient is a mock of UsersClient interface.
type MockUsersClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsersClientMockRecorder
}

// MockUsersClientMockRecorder is the mock recorder for MockUsersClient.
type MockUsersClientMockRecorder struct {
	mock *MockUsersClient
}

// NewMockUsersClient creates a new mock instance.
func NewMockUsersClient(ctrl *gomock.Controller) *MockUsersClient {
	mock := &MockUsersClient{ctrl: ctrl}
	mock.recorder = &MockUsersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersClient) EXPECT() *MockUsersClientMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUsersClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePassword", varargs...)
	ret0, _ := ret[0].(*ChangePasswordResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUsersClientMockRecorder) ChangePassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUsersClient)(nil).ChangePassword), varargs...)
}

// Create mocks base method.
func (m *MockUsersClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*CreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsersClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockUsersClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersClient)(nil).Delete), varargs...)
}

// Details mocks base method.
func (m *MockUsersClient) Details(ctx context.Context, in *DetailsReq, opts ...grpc.CallOption) (Users_DetailsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Details", varargs...)
	ret0, _ := ret[0].(Users_DetailsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Details indicates an expected call of Details.
func (mr *MockUsersClientMockRecorder) Details(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockUsersClient)(nil).Details), varargs...)
}

// Disable mocks base method.
func (m *MockUsersClient) Disable(ctx context.Context, in *DisableReq, opts ...grpc.CallOption) (*DisableResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Disable", varargs...)
	ret0, _ := ret[0].(*DisableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockUsersClientMockRecorder) Disable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockUsersClient)(nil).Disable), varargs...)
}

// Enable mocks base method.
func (m *MockUsersClient) Enable(ctx context.Context, in *EnableReq, opts ...grpc.CallOption) (*EnableResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Enable", varargs...)
	ret0, _ := ret[0].(*EnableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockUsersClientMockRecorder) Enable(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockUsersClient)(nil).Enable), varargs...)
}

// ResetPassword mocks base method.
func (m *MockUsersClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetPassword", varargs...)
	ret0, _ := ret[0].(*ResetPasswordResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUsersClientMockRecorder) ResetPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUsersClient)(nil).ResetPassword), varargs...)
}

// Update mocks base method.
func (m *MockUsersClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*UpdateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUsersClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersClient)(nil).Update), varargs...)
}

// MockUsers_DetailsClient is a mock of Users_DetailsClient interface.
type MockUsers_DetailsClient struct {
	ctrl     *gomock.Controller
	recorder *MockUsers_DetailsClientMockRecorder
}

// MockUsers_DetailsClientMockRecorder is the mock recorder for MockUsers_DetailsClient.
type MockUsers_DetailsClientMockRecorder struct {
	mock *MockUsers_DetailsClient
}

// NewMockUsers_DetailsClient creates a new mock instance.
func NewMockUsers_DetailsClient(ctrl *gomock.Controller) *MockUsers_DetailsClient {
	mock := &MockUsers_DetailsClient{ctrl: ctrl}
	mock.recorder = &MockUsers_DetailsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers_DetailsClient) EXPECT() *MockUsers_DetailsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockUsers_DetailsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockUsers_DetailsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockUsers_DetailsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockUsers_DetailsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUsers_DetailsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUsers_DetailsClient)(nil).Context))
}

// Header mocks base method.
func (m *MockUsers_DetailsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockUsers_DetailsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockUsers_DetailsClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockUsers_DetailsClient) Recv() (*DetailsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*DetailsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockUsers_DetailsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockUsers_DetailsClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockUsers_DetailsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUsers_DetailsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUsers_DetailsClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockUsers_DetailsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUsers_DetailsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUsers_DetailsClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockUsers_DetailsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockUsers_DetailsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockUsers_DetailsClient)(nil).Trailer))
}

// MockUsersServer is a mock of UsersServer interface.
type MockUsersServer struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServerMockRecorder
}

// MockUsersServerMockRecorder is the mock recorder for MockUsersServer.
type MockUsersServerMockRecorder struct {
	mock *MockUsersServer
}

// NewMockUsersServer creates a new mock instance.
func NewMockUsersServer(ctrl *gomock.Controller) *MockUsersServer {
	mock := &MockUsersServer{ctrl: ctrl}
	mock.recorder = &MockUsersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersServer) EXPECT() *MockUsersServerMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUsersServer) ChangePassword(arg0 context.Context, arg1 *ChangePasswordReq) (*ChangePasswordResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1)
	ret0, _ := ret[0].(*ChangePasswordResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUsersServerMockRecorder) ChangePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUsersServer)(nil).ChangePassword), arg0, arg1)
}

// Create mocks base method.
func (m *MockUsersServer) Create(arg0 context.Context, arg1 *CreateReq) (*CreateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*CreateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsersServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockUsersServer) Delete(arg0 context.Context, arg1 *DeleteReq) (*DeleteResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersServer)(nil).Delete), arg0, arg1)
}

// Details mocks base method.
func (m *MockUsersServer) Details(arg0 *DetailsReq, arg1 Users_DetailsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Details", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Details indicates an expected call of Details.
func (mr *MockUsersServerMockRecorder) Details(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockUsersServer)(nil).Details), arg0, arg1)
}

// Disable mocks base method.
func (m *MockUsersServer) Disable(arg0 context.Context, arg1 *DisableReq) (*DisableResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", arg0, arg1)
	ret0, _ := ret[0].(*DisableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockUsersServerMockRecorder) Disable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockUsersServer)(nil).Disable), arg0, arg1)
}

// Enable mocks base method.
func (m *MockUsersServer) Enable(arg0 context.Context, arg1 *EnableReq) (*EnableResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", arg0, arg1)
	ret0, _ := ret[0].(*EnableResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockUsersServerMockRecorder) Enable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockUsersServer)(nil).Enable), arg0, arg1)
}

// ResetPassword mocks base method.
func (m *MockUsersServer) ResetPassword(arg0 context.Context, arg1 *ResetPasswordReq) (*ResetPasswordResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(*ResetPasswordResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUsersServerMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUsersServer)(nil).ResetPassword), arg0, arg1)
}

// Update mocks base method.
func (m *MockUsersServer) Update(arg0 context.Context, arg1 *UpdateReq) (*UpdateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*UpdateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUsersServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedUsersServer mocks base method.
func (m *MockUsersServer) mustEmbedUnimplementedUsersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUsersServer")
}

// mustEmbedUnimplementedUsersServer indicates an expected call of mustEmbedUnimplementedUsersServer.
func (mr *MockUsersServerMockRecorder) mustEmbedUnimplementedUsersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUsersServer", reflect.TypeOf((*MockUsersServer)(nil).mustEmbedUnimplementedUsersServer))
}

// MockUnsafeUsersServer is a mock of UnsafeUsersServer interface.
type MockUnsafeUsersServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUsersServerMockRecorder
}

// MockUnsafeUsersServerMockRecorder is the mock recorder for MockUnsafeUsersServer.
type MockUnsafeUsersServerMockRecorder struct {
	mock *MockUnsafeUsersServer
}

// NewMockUnsafeUsersServer creates a new mock instance.
func NewMockUnsafeUsersServer(ctrl *gomock.Controller) *MockUnsafeUsersServer {
	mock := &MockUnsafeUsersServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUsersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUsersServer) EXPECT() *MockUnsafeUsersServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUsersServer mocks base method.
func (m *MockUnsafeUsersServer) mustEmbedUnimplementedUsersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUsersServer")
}

// mustEmbedUnimplementedUsersServer indicates an expected call of mustEmbedUnimplementedUsersServer.
func (mr *MockUnsafeUsersServerMockRecorder) mustEmbedUnimplementedUsersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUsersServer", reflect.TypeOf((*MockUnsafeUsersServer)(nil).mustEmbedUnimplementedUsersServer))
}

// MockUsers_DetailsServer is a mock of Users_DetailsServer interface.
type MockUsers_DetailsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUsers_DetailsServerMockRecorder
}

// MockUsers_DetailsServerMockRecorder is the mock recorder for MockUsers_DetailsServer.
type MockUsers_DetailsServerMockRecorder struct {
	mock *MockUsers_DetailsServer
}

// NewMockUsers_DetailsServer creates a new mock instance.
func NewMockUsers_DetailsServer(ctrl *gomock.Controller) *MockUsers_DetailsServer {
	mock := &MockUsers_DetailsServer{ctrl: ctrl}
	mock.recorder = &MockUsers_DetailsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers_DetailsServer) EXPECT() *MockUsers_DetailsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockUsers_DetailsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockUsers_DetailsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockUsers_DetailsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockUsers_DetailsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockUsers_DetailsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockUsers_DetailsServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockUsers_DetailsServer) Send(arg0 *DetailsResp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockUsers_DetailsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockUsers_DetailsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockUsers_DetailsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockUsers_DetailsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockUsers_DetailsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockUsers_DetailsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockUsers_DetailsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockUsers_DetailsServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockUsers_DetailsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockUsers_DetailsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockUsers_DetailsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockUsers_DetailsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockUsers_DetailsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockUsers_DetailsServer)(nil).SetTrailer), arg0)
}
