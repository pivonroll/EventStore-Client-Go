// Code generated by MockGen. DO NOT EDIT.
// Source: async_read_connection.go

// Package persistent is a generated GoMock package.
package persistent

import (
	reflect "reflect"

	messages "github.com/EventStore/EventStore-Client-Go/messages"
	gomock "github.com/golang/mock/gomock"
)

// MockAsyncReadConnection is a mock of AsyncReadConnection interface.
type MockAsyncReadConnection struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncReadConnectionMockRecorder
}

// MockAsyncReadConnectionMockRecorder is the mock recorder for MockAsyncReadConnection.
type MockAsyncReadConnectionMockRecorder struct {
	mock *MockAsyncReadConnection
}

// NewMockAsyncReadConnection creates a new mock instance.
func NewMockAsyncReadConnection(ctrl *gomock.Controller) *MockAsyncReadConnection {
	mock := &MockAsyncReadConnection{ctrl: ctrl}
	mock.recorder = &MockAsyncReadConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncReadConnection) EXPECT() *MockAsyncReadConnectionMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockAsyncReadConnection) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockAsyncReadConnectionMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAsyncReadConnection)(nil).Start))
}

// Stop mocks base method.
func (m *MockAsyncReadConnection) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockAsyncReadConnectionMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAsyncReadConnection)(nil).Stop))
}

// Updates mocks base method.
func (m *MockAsyncReadConnection) Updates() <-chan messages.RecordedEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates")
	ret0, _ := ret[0].(<-chan messages.RecordedEvent)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockAsyncReadConnectionMockRecorder) Updates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockAsyncReadConnection)(nil).Updates))
}
