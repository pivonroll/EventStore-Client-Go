// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package persistent is a generated GoMock package.
package persistent

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errors "github.com/pivonroll/EventStore-Client-Go/errors"
	stream_revision "github.com/pivonroll/EventStore-Client-Go/stream_revision"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateSubscriptionGroupForStream mocks base method.
func (m *MockClient) CreateSubscriptionGroupForStream(ctx context.Context, request SubscriptionGroupForStreamRequest) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionGroupForStream", ctx, request)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// CreateSubscriptionGroupForStream indicates an expected call of CreateSubscriptionGroupForStream.
func (mr *MockClientMockRecorder) CreateSubscriptionGroupForStream(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionGroupForStream", reflect.TypeOf((*MockClient)(nil).CreateSubscriptionGroupForStream), ctx, request)
}

// CreateSubscriptionGroupForStreamAll mocks base method.
func (m *MockClient) CreateSubscriptionGroupForStreamAll(ctx context.Context, request SubscriptionGroupForStreamAllRequest) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscriptionGroupForStreamAll", ctx, request)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// CreateSubscriptionGroupForStreamAll indicates an expected call of CreateSubscriptionGroupForStreamAll.
func (mr *MockClientMockRecorder) CreateSubscriptionGroupForStreamAll(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscriptionGroupForStreamAll", reflect.TypeOf((*MockClient)(nil).CreateSubscriptionGroupForStreamAll), ctx, request)
}

// DeleteSubscriptionGroupForStream mocks base method.
func (m *MockClient) DeleteSubscriptionGroupForStream(ctx context.Context, streamId, groupName string) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionGroupForStream", ctx, streamId, groupName)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// DeleteSubscriptionGroupForStream indicates an expected call of DeleteSubscriptionGroupForStream.
func (mr *MockClientMockRecorder) DeleteSubscriptionGroupForStream(ctx, streamId, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionGroupForStream", reflect.TypeOf((*MockClient)(nil).DeleteSubscriptionGroupForStream), ctx, streamId, groupName)
}

// DeleteSubscriptionGroupForStreamAll mocks base method.
func (m *MockClient) DeleteSubscriptionGroupForStreamAll(ctx context.Context, groupName string) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscriptionGroupForStreamAll", ctx, groupName)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// DeleteSubscriptionGroupForStreamAll indicates an expected call of DeleteSubscriptionGroupForStreamAll.
func (mr *MockClientMockRecorder) DeleteSubscriptionGroupForStreamAll(ctx, groupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriptionGroupForStreamAll", reflect.TypeOf((*MockClient)(nil).DeleteSubscriptionGroupForStreamAll), ctx, groupName)
}

// SubscribeToStreamSync mocks base method.
func (m *MockClient) SubscribeToStreamSync(ctx context.Context, bufferSize int32, groupName, streamId string) (EventReader, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToStreamSync", ctx, bufferSize, groupName, streamId)
	ret0, _ := ret[0].(EventReader)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// SubscribeToStreamSync indicates an expected call of SubscribeToStreamSync.
func (mr *MockClientMockRecorder) SubscribeToStreamSync(ctx, bufferSize, groupName, streamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToStreamSync", reflect.TypeOf((*MockClient)(nil).SubscribeToStreamSync), ctx, bufferSize, groupName, streamId)
}

// UpdateSubscriptionGroupForStream mocks base method.
func (m *MockClient) UpdateSubscriptionGroupForStream(ctx context.Context, request SubscriptionGroupForStreamRequest) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionGroupForStream", ctx, request)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateSubscriptionGroupForStream indicates an expected call of UpdateSubscriptionGroupForStream.
func (mr *MockClientMockRecorder) UpdateSubscriptionGroupForStream(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionGroupForStream", reflect.TypeOf((*MockClient)(nil).UpdateSubscriptionGroupForStream), ctx, request)
}

// UpdateSubscriptionGroupForStreamAll mocks base method.
func (m *MockClient) UpdateSubscriptionGroupForStreamAll(ctx context.Context, GroupName string, Position stream_revision.IsReadPositionAll, Settings CreateOrUpdateRequestSettings) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscriptionGroupForStreamAll", ctx, GroupName, Position, Settings)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// UpdateSubscriptionGroupForStreamAll indicates an expected call of UpdateSubscriptionGroupForStreamAll.
func (mr *MockClientMockRecorder) UpdateSubscriptionGroupForStreamAll(ctx, GroupName, Position, Settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriptionGroupForStreamAll", reflect.TypeOf((*MockClient)(nil).UpdateSubscriptionGroupForStreamAll), ctx, GroupName, Position, Settings)
}
