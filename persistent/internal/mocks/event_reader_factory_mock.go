// Code generated by MockGen. DO NOT EDIT.
// Source: event_reader_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event_reader "github.com/pivonroll/EventStore-Client-Go/persistent/event_reader"
	message_adapter "github.com/pivonroll/EventStore-Client-Go/persistent/internal/message_adapter"
	persistent "github.com/pivonroll/EventStore-Client-Go/protos/v21.6/persistent"
)

// EventReaderFactory is a mock of Factory interface.
type EventReaderFactory struct {
	ctrl     *gomock.Controller
	recorder *EventReaderFactoryMockRecorder
}

// EventReaderFactoryMockRecorder is the mock recorder for EventReaderFactory.
type EventReaderFactoryMockRecorder struct {
	mock *EventReaderFactory
}

// NewEventReaderFactory creates a new mock instance.
func NewEventReaderFactory(ctrl *gomock.Controller) *EventReaderFactory {
	mock := &EventReaderFactory{ctrl: ctrl}
	mock.recorder = &EventReaderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *EventReaderFactory) EXPECT() *EventReaderFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *EventReaderFactory) Create(client persistent.PersistentSubscriptions_ReadClient, subscriptionId string, messageAdapter message_adapter.MessageAdapter, cancel context.CancelFunc) event_reader.EventReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", client, subscriptionId, messageAdapter, cancel)
	ret0, _ := ret[0].(event_reader.EventReader)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *EventReaderFactoryMockRecorder) Create(client, subscriptionId, messageAdapter, cancel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*EventReaderFactory)(nil).Create), client, subscriptionId, messageAdapter, cancel)
}
